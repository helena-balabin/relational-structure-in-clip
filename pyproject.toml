[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ["py312"]
include = """
(
    ^notebooks/.*\\.ipynb$
  | ^src/.*\\.py$
)
"""

[tool.poetry]
name = "relationalstructureinclip"
version = "0.1.0"
description = "Probing relational structures in CLIP with applications to neural data."
authors = ["Helena Balabin <helena.balabin@kuleuven.be>"]
license = "Internal Use Only"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
transformers = "^4.57.0"
datasets = "^4.1.1"
torch = "^2.8.0"
numpy = "^2.3.3"
pandas = "^2.3.3"
networkx = "^3.5"
tqdm = "^4.67.1"
pillow = "^11.3.0"
torchmetrics = "^1.8.2"
matplotlib = "^3.10.7"
optuna = "^4.5.0"
scikit-learn = "^1.3.2"
torchvision = "^0.23.0"
mlflow = "^3.4.0"

[tool.poetry.group.dev.dependencies]
toml = "^0.10.2"
nbconvert = "^7.8.0"
black = {version = "23.7.0", extras = ["jupyter"]}
hydra-core = "1.3.2"
ipykernel = "6.24.0"
mkdocs = "1.5.3"
mkdocs-git-revision-date-localized-plugin = "1.2.2"
mkdocs-material = "9.5.4"
mkdocs-mermaid2-plugin = "1.1.1"
mkdocstrings-python = "1.8.0"
pre-commit = "3.3.3"
pymarkdownlnt = "0.9.13"
pytest = "7.4.0"
pytest-benchmark = "4.0.0"
pytest-xdist = "3.3.1"
rope = "1.9.0"
ruff = "0.1.13"
dvc = "3.40.1"

[tool.pymarkdown]
disable-rules = ["MD046"]

[tool.ruff]
select = [
  # Pyflakes (F) rules
  "F401", # Unused imports
  "F402", # Import shadowed by loop var
  "F403", # `from module import *` used
  "F405", # Name may be undefined, or defined from star imports
  "F601", # Dictionary key literal repeated
  "F602", # Dictionary key variable repeated
  "F621", # Too many expressions in star-unpacking assignment
  "F631", # Assert test is a non-empty tuple
  "F632", # Use `==` to compare constant literals
  "F701", # `break` outside loop
  "F702", # `continue` not properly in loop
  "F704", # Yield statement outside of a function
  "F706", # `return` statement outside of a function/method
  "F707", # `except` block not the last exception handler
  "F722", # Syntax error in forward annotation
  "F811", # Redefinition of unused variable from line
  "F821", # Undefined name
  "F841", # Local variable is assigned to but never used
  # pycodestyle (E, W) rules
  "E101", # Indentation contains mixed spaces and tabs
  "E111", # Indentation is not a multiple of four
  "E112", # Expected an indented block
  "E113", # Unexpected indentation
  "E114", # Indentation is not a multiple of four (comment)
  "E115", # Expected an indented block (comment)
  "E116", # Unexpected indentation (comment)
  "E117", # Over-indented (comment)
  "E201", # Whitespace after '(' or '['
  "E202", # Whitespace before ')' or ']'
  "E203", # Whitespace before ':'
  "E211", # Whitespace before '(' or '['
  "E225", # Missing whitespace around operator
  "E231", # Missing whitespace after ',', ';', or ':'
  "E251", # Unexpected spaces around keyword / parameter equals
  "E261", # At least two spaces before inline comment
  "E262", # Inline comment should start with '# '
  "E265", # Block comment should start with '# '
  "E266", # Too many leading '#' for block comment
  "E271", # Multiple spaces after keyword
  "E272", # Multiple spaces before keyword
  "E273", # Tab after keyword
  "E274", # Tab before keyword
  "E275", # Missing whitespace after keyword
  "E401", # Multiple imports on one line
  "E402", # Module level import not at top of file
  "E501", # Line too long
  "E711", # Comparison to None should be 'expr is None'
  "E712", # Comparison to True should be 'if cond is True:' or 'if cond:'
  "E713", # Test for membership should be 'not in'
  "E714", # Test for object identity should be 'is not'
  "E721", # Do not compare types, use 'isinstance()'
  "E722", # Do not use bare 'except'
  "E731", # Do not assign a lambda expression, use a def
  # isort (I) rules
  "I001", # Import block is un-sorted or un-formatted
  "I002", # Missing required import
  # pep8-naming (N) rules
  "N801", # Class name should use CapWords convention
  "N802", # Function name should be lowercase
  "N803", # Argument name should be lowercase
  "N804", # First argument of a class method should be named 'cls'
  "N805", # First argument of a method should be named 'self'
  "N806", # Variable in function should be lowercase
  # pydocstyle (D) rules
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D106", # Missing docstring in public nested class
  "D107" # Missing docstring in __init__
]
# Decrease the maximum line length to 120 characters.
line-length = 120
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
